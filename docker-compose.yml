version: "3.9"
services:
  api:
    build:
      context: .
      dockerfile: ./Dockerfile
    restart: unless-stopped
    logging:
      driver: 'gelf'
      options:
        gelf-address: 'udp://localhost:12201'
        tag: my-api
    networks:
      - ompnw
    depends_on:
      - postgres
    links:
      - postgres
    ports:
      - 8083:8080 # REST
      - 8082:8082 # gRPC
      # - 9100:9100 # Metrics prometheus
      # - 8000:8000 # Status prometheus
      # - 40000:40000 # Debug port
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/live']
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 20s
    volumes:
      - ./config.yml:/root/config.yml

  # migration:
  #   build:
  #     context: .
  #     dockerfile: docker/migration/Dockerfile
  #   networks:
  #     - ompnw
  #   depends_on:
  #     - postgres
  #   links:
  #     - postgres
  #   volumes:
  #     - ./migrations:/root/migrations
  #     - ./config.yml:/root/config.yml

  postgres:
    container_name: postgres_1
    image: postgres:latest
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "postgres" ]
      timeout: 45s
      interval: 10s
      retries: 10
    restart: always
    logging:
      driver: 'gelf'
      options:
        gelf-address: 'udp://localhost:12201'
        tag: postgres    
    environment:
      POSTGRES_DB: "base"
      POSTGRES_USER: "user"
      POSTGRES_PASSWORD: "password"
      PGDATA: "/var/lib/postgresql/data/pgdata"
      APP_DB_USER: user
      APP_DB_PASS: password
    ports:
      - 5400:5432
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G
    networks:
      - ompnw
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./scripts/init-database.sh:/docker-entrypoint-initdb.d/init-database.sh
 

  # swagger-ui:
  #   image: swaggerapi/swagger-ui
  #   ports:
  #     - 8081:8080
  #   restart: always
  #   volumes:
  #     - ./swagger:/swagger
  #   environment:
  #     SWAGGER_JSON: ./swagger/aperg/my_api/v1/my_api.swagger.json
  #   depends_on:
  #     - api
  #   networks:
  #     - ompnw

  jaeger:
    image: jaegertracing/all-in-one
    restart: unless-stopped
    logging:
      driver: 'gelf'
      options:
        gelf-address: 'udp://localhost:12201'
        tag: jaeger
    ports:
      - 6831:6831/udp
      - 16686:16686
    networks:
      - ompnw

  mongo:
    image: mongo:4.2
    restart: always
    networks:
      - ompnw
    volumes:
      - mongodata:/data/db

volumes:
  pgdata:
    driver: local
  mongodata:
    driver: local

networks:
  ompnw:
    driver: bridge
